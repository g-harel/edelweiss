from "../test" {ExampleType, helper as testHelper}
from "~/core" {Type as CoreType}

@share
contract *Comparable <T> {
    equals func (target T) (Bool)
}

@share
contract *List <T> {
    empty func () (Bool)
    head func () (T?)
    tail func () (Self)
    reduce func <S> (initial S, func (acc S, item T) (S)) (S)
    append func (item T) (Self)
    concat func (items Self) (Self)
}

@share
@respect *Comparable<Self>
type Bool {}

@share
func (b Bool) invert () (Bool) {}

@share
func (b Bool) and (bool Bool) (Bool) {}

@share
func (b Bool) or (bool Bool) (Bool) {}

@share
@respect *Comparable<Self>
type Num {}

@share
func (Num) random () (Num) {}

@share
func (n Num) add (num Num) (Num) {}

@share
func (n Num) mul (num Num) (Num) {}

@share
func (n Num) pow (num Num) (Num) {}

@share
func (n Num) greater (num Num) (Bool) {}

@share
func (n Num) smaller (num Num) (Bool) {}

@share
@respect *Comparable<Self>
type Char {}

@share
@respect *Comparable<Self>
@respect *List<Char>
type String {}

@share
type Error {
    code Num?
    internal Bool
    history List<Error>
}

@share
func (Error) new (message String) (Error) {
    return Error(
        code = Error.isMissing,
        message = message,
        internal = false,
        history = [],
    )
}

@share
func (Error) newCoded (code Num, message String) (Error) {
    return Error(
        code = Num,
        message = message,
        internal = false,
        history = [],
    )
}

@share
func (Error) getOutOfBounds() (Error) {
    return Error(
        message = "out of bounds",
        code = 0,
        internal = true,
        history = [],
    )
}

@share
func (Error) getMissing() (Error) {
    return Error(
        message = "missing",
        code = 1,
        internal = true,
        history = [],
    )
}

@share
func (e Error) message () (String) {
    # TODO Concat errors?
    return e.message
}

@share
func (e Error) wrap (err Error) (Error) {
    history = e.history.append(err).concat(err.history)
    return Error(
        code = e.code,
        message = e.message,
        internal = e.internal,
        history = history,
    )
}

@share
func (e Error) wraps (query Error) (Bool) {
    handle query.code {
        return false
    }
    return e.history.reduce<Bool>(false, func (acc Bool, err Error) (Bool) {
        if acc {
            return acc
        }
        handle err.code {
            return false
        }
        if query.code.equals(err.code).invert() {
            return false
        }
        if query.internal.equals(err.internal).invert() {
            return false
        }
        return true
    })
}

@share
@respect *Comparable<Self>
type Vehicle {
    doors Num
    wheels Num
}

@share
func (Vehicle) newCar () (Vehicle) {
    return Vehicle(
        doors = 4,
        wheels = 4,
    )
}

@share
func (Vehicle) newTruck (doors Num) (Vehicle?) {
    if doors.smaller(0) {
        return Error.isOutOfBounds.wrap("door count is negative")
    }
    return Vehicle(
        doors = doors,
        wheels = 18,
    )
}

@share
func (v Vehicle) isLarge () (Bool) {
    if v.doors.greater(4) {
        return true
    }
    if v.wheels.greater(4) {
        return true
    }
    return false
}

@share
func (a Vehicle) equals (b Vehicle) (Bool) {
    if a.doors.equals(b.doors()).invert() {
        return false
    }
    if a.wheels.equals(b.wheels()).invert() {
        return false
    }
    return true
}

func relativeCounter <T Comparable> (items List<T>, item T) (Num) {
    if items.empty() {
        return 0
    }
    remaining = relativeCounter<T>(items.tail(), item)
    head = items.head()
    check head {
        return remaining
    }
    if item.equals(head) {
        return remaining.add(1)
    }
    return remaining
}

@share
func adder (n Num) (Num) {
    return [0..n].reduce<Num>(0, func (a Num, b Num) a.add(b))
}

@share
func counter (s String, item Char) (Num) {
    return relativeCounter<Char>(s, item)
}
