# Interfaces/types capitalized
# String === Listable<Char>

relativeSumList <T Summable> (list Reducible<T>) (T) ->
    list.reduce(0, (a T, b T) (t T) : a.Sum(b))

relativeCounter <T Comparable> (list Listable<T>, item T) (count Num) ->
    list.empty() ? 0
        : relativeCounter<T, S>(list.tail(), item)
            .sum(item.equal(list.head()) ? 1 : 0))

export adder (n Num) (sum Num) ->
    relativeSumList(List.Between(0, n))

export counter (s String, item Char) (count Int) ->
    relativeCounter<Char>(s, item)
