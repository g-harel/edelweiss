share type Bool {
    Comparable<Self>
    share invert func () (Bool)
}

share type Comparable <T> {
    share equals func (T) (Bool)
}

share type List <T> {
    Comparable<Self>
    share empty func () (Bool)
    share head func () (T?)
    share tail func () (Self)
    share reduce func <T> (acc T, func (T, T) (T)) (T)
}

share type Num {
    Comparable<Self>
    share add func (Self) (Self)
    share greater func (Self) (Bool)
    share smaller func (Self) (Bool)
}

share type Char {
    Comparable<Self>
}

share type String {
    List<Char>
}

share type Error {
    share .new func (message String) (Self)
    share .isOutOfBounds Self
    share wrap func (message String) (Self)
    share wraps func (err Error) (Bool)
    share message String
}

share type Vehicle {
    share .newCar func () (Self)
    share .newTruck func () (Self?)
    Comparable<Self>
    share isLarge func () (Bool)
    doors Num
    wheels Num
}

func (Vehicle) newCar () (Vehicle) {
    return Vehicle(
        doors = 4,
        wheels = 4,
    )
}

func (Vehicle) newTruck (doors Num) (Vehicle?) {
    if doors.smaller(0) {
        return Error.isOutOfBounds.wrap("door count is negative")
    }
    return Vehicle(
        doors = doors,
        wheels = 18,
    )
}

func (v Vehicle) isLarge () (Bool) {
    if v.doors.greater(4) {
        return true
    }
    if v.wheels.greater(4) {
        return true
    }
    return false
}

func (a Vehicle) equals <T Vehicle> (b T) (Bool) {
    if a.doors.equals(b.doors()).invert() {
        return false
    }
    if a.wheels.equals(b.wheels()).invert() {
        return false
    }
    return true
}

func sumList (nums List<Num>) (T) {
    return nums.reduce(0, func (a T, b T) a.add(b));
}

func relativeCounter <T Comparable> (items List<T>, item T) (Num) {
    if items.empty() {
        return 0
    }
    remaining = relativeCounter<T>(items.tail(), item)
    head = items.head()
    check head {
        return remaining
    }
    if item.equals(head) {
        return remaining.add(1)
    }
    return remaining
}

share func adder (n Num) (Num) {
    return relativeSumList([0..n])
}

share func counter (s String, item Char) (Num) {
    return relativeCounter<Char>(s, item)
}
