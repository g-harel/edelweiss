# Interfaces capitalized

export interface List <T> {
    empty () (bool)
    head () (T | null)
    tail () (List<T)
    reduce <T> (acc T, func (T, T) (T)) (T)
}

export interface Comparable <T> {
    equals (T) (bool)
}

export interface Num {
    Comparable
    add (Num) (Num)
}

export interface Char {
    Comparable
}

export interface String {
    List<Char>
}

func sumList (nums List<Num>) (T) {
    return nums.reduce(0, func (a T, b T) a.add(b));
}

func relativeCounter <T Comparable> (items List<T>, item T) (Num) {
    return? items.empty() 0
    remaining := relativeCounter<T>(items.tail(), item)
    return? item.equals(items.head()) remaining.add(1)
    return remaining
}

export func adder (n Num) (Num) {
    return relativeSumList([0..n])
}

export func counter (s String, item Char) (Num) {
    return relativeCounter<Char>(s, item)
}
