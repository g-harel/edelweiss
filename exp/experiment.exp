# Interfaces/types capitalized
# String === Listable<Char>

func relativeSumList <T Summable> (list Reducible<T>) (T) {
    return list.reduce(0, func (a T, b T) (t T) a.add(b));
}

func relativeCounter <T Comparable> (list Listable<T>, item T) (count Num) {
    return? list.empty() 0;
    remaining := relativeCounter<T>(list.tail(), item)
    return? item.equal(list.head()) remaining.add(1)
    return remaining
}

export func adder (n Num) (sum Num) {
    return relativeSumList(List.Between(0, n))
}

export func counter (s String, item Char) (count Int) {
    return relativeCounter<Char>(s, item)
}
